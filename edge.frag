// fragment shader
#version 120
uniform float size;
uniform float rotate;
uniform sampler2D textureImage;

struct myMatrix{
    float first, s, t, f, fi, si, se, e, n;
};

const myMatrix matrices[36] = myMatrix[36](
myMatrix( 
1.0 , 2.0 , 1.0 , 
0.0 , 0.0 , 0.0 , 
-1.0 , -2.0 , -1.0 
), 
myMatrix( 
1.19447 , 1.85181 , 0.83638 , 
0.179047 , 0.0 , -0.179047 , 
-0.83638 , -1.85181 , -1.19447 
), 
myMatrix( 
1.45151 , 1.74103 , 0.676849 , 
0.387329 , 0.0 , -0.387329 , 
-0.676849 , -1.74103 , -1.45151 
), 
myMatrix( 
1.82137 , 1.64273 , 0.488034 , 
0.666667 , 0.0 , -0.666667 , 
-0.488034 , -1.64273 , -1.82137 
), 
myMatrix( 
2.40077 , 1.51545 , 0.210041 , 
1.09537 , 0.0 , -1.09537 , 
-0.210041 , -1.51545 , -2.40077 
), 
myMatrix( 
2.40077 , 1.09537 , -0.21004 , 
1.51545 , 0.0 , -1.51545 , 
0.21004 , -1.09537 , -2.40077 
), 
myMatrix( 
1.82137 , 0.666667 , -0.488034 , 
1.64273 , 0.0 , -1.64273 , 
0.488034 , -0.666667 , -1.82137 
), 
myMatrix( 
1.45151 , 0.387329 , -0.676849 , 
1.74103 , 0.0 , -1.74103 , 
0.676849 , -0.387329 , -1.45151 
), 
myMatrix( 
1.19447 , 0.179047 , -0.83638 , 
1.85181 , 0.0 , -1.85181 , 
0.83638 , -0.179047 , -1.19447 
), 
myMatrix( 
1 , 0.0 , -1.0 , 
2.0 , 0.0 , -2.0 , 
1.0 , 0.0 , -1 
), 
myMatrix( 
0.83638 , -0.179047 , -1.19447 , 
1.85181 , 0.0 , -1.85181 , 
1.19447 , 0.179047 , -0.83638 
), 
myMatrix( 
0.676849 , -0.387329 , -1.45151 , 
1.74103 , 0.0 , -1.74103 , 
1.45151 , 0.387329 , -0.676849 
), 
myMatrix( 
0.488034 , -0.666667 , -1.82137 , 
1.64273 , 0.0 , -1.64273 , 
1.82137 , 0.666667 , -0.488034 
), 
myMatrix( 
0.21004 , -1.09537 , -2.40077 , 
1.51545 , 0.0 , -1.51545 , 
2.40077 , 1.09537 , -0.21004 
), 
myMatrix( 
-0.21004 , -1.51545 , -2.40077 , 
1.09537 , 0.0 , -1.09537 , 
2.40077 , 1.51545 , 0.21004 
), 
myMatrix( 
-0.488034 , -1.64273 , -1.82137 , 
0.666667 , 0.0 , -0.666667 , 
1.82137 , 1.64273 , 0.488034 
), 
myMatrix( 
-0.676849 , -1.74103 , -1.45151 , 
0.387329 , 0.0 , -0.387329 , 
1.45151 , 1.74103 , 0.676849 
), 
myMatrix( 
-0.836379 , -1.85181 , -1.19447 , 
0.179047 , 0.0 , -0.179047 , 
1.19447 , 1.85181 , 0.836379 
), 
myMatrix( 
-1.0 , -2.0 , -1 , 
0.0 , 0.0 , 0.0 , 
1 , 2.0 , 1.0 
), 
myMatrix( 
-1.19447 , -1.85181 , -0.83638 , 
-0.179047 , 0.0 , 0.179047 , 
0.83638 , 1.85181 , 1.19447 
), 
myMatrix( 
-1.45151 , -1.74103 , -0.676849 , 
-0.387329 , 0.0 , 0.387329 , 
0.676849 , 1.74103 , 1.45151 
), 
myMatrix( 
-1.82137 , -1.64273 , -0.488034 , 
-0.666667 , 0.0 , 0.666667 , 
0.488034 , 1.64273 , 1.82137 
), 
myMatrix( 
-2.40077 , -1.51545 , -0.210041 , 
-1.09537 , 0.0 , 1.09537 , 
0.210041 , 1.51545 , 2.40077 
), 
myMatrix( 
-2.40077 , -1.09537 , 0.210041 , 
-1.51545 , 0.0 , 1.51545 , 
-0.210041 , 1.09537 , 2.40077 
), 
myMatrix( 
-1.82137 , -0.666667 , 0.488034 , 
-1.64273 , 0.0 , 1.64273 , 
-0.488034 , 0.666667 , 1.82137 
), 
myMatrix( 
-1.45151 , -0.387329 , 0.676849 , 
-1.74103 , 0.0 , 1.74103 , 
-0.676849 , 0.387329 , 1.45151 
), 
myMatrix( 
-1.19447 , -0.179047 , 0.83638 , 
-1.85181 , 0.0 , 1.85181 , 
-0.83638 , 0.179047 , 1.19447 
), 
myMatrix( 
-1.0 , 0.0 , 1.0 , 
-2.0 , 0.0 , 2.0 , 
-1.0 , 0.0 , 1.0 
), 
myMatrix( 
-0.83638 , 0.179047 , 1.19447 , 
-1.85181 , 0.0 , 1.85181 , 
-1.19447 , -0.179047 , 0.83638 
), 
myMatrix( 
-0.676849 , 0.387329 , 1.45151 , 
-1.74103 , 0.0 , 1.74103 , 
-1.45151 , -0.387329 , 0.676849 
), 
myMatrix( 
-0.488034 , 0.666667 , 1.82137 , 
-1.64273 , 0.0 , 1.64273 , 
-1.82137 , -0.666667 , 0.488034 
), 
myMatrix( 
-0.210041 , 1.09537 , 2.40077 , 
-1.51545 , 0.0 , 1.51545 , 
-2.40077 , -1.09537 , 0.210041 
), 
myMatrix( 
0.21004 , 1.51545 , 2.40077 , 
-1.09537 , 0.0 , 1.09537 , 
-2.40077 , -1.51545 , -0.21004 
), 
myMatrix( 
0.488034 , 1.64273 , 1.82137 , 
-0.666667 , 0.0 , 0.666667 , 
-1.82137 , -1.64273 , -0.488034 
), 
myMatrix( 
0.676848 , 1.74103 , 1.45151 , 
-0.387329 , 0.0 , 0.387329 , 
-1.45151 , -1.74103 , -0.676848 
), 
myMatrix( 
0.83638 , 1.85181 , 1.19447 , 
-0.179047 , 0.0 , 0.179047 , 
-1.19447 , -1.85181 , -0.83638 
)
);


void main(void) {
    
    vec2 offset[9] = vec2[] (
        vec2(-1, 1), vec2(0, 1), vec2(1, 1),
        vec2(-1, 0), vec2(0, 0), vec2(1, 0),
        vec2(-1,-1), vec2(0,-1), vec2(1,-1)
    );

    float sobel[9] = float[]( //u
         1.0,  2.0,  1.0, 
         0.0,  0.0,  0.0, 
         -1.0, -2.0,  -1.0  
    );

    
    int auxRotate = int(rotate)/10;
    myMatrix auxiliarMatrix = matrices[int(auxRotate)];
    sobel[0] = auxiliarMatrix.first; 
    sobel[1] = auxiliarMatrix.s;
    sobel[2] = auxiliarMatrix.t;    
    sobel[3] = auxiliarMatrix.f;
    sobel[4] = auxiliarMatrix.fi; 
    sobel[5] = auxiliarMatrix.si; 
    sobel[6] = auxiliarMatrix.se; 
    sobel[7] = auxiliarMatrix.e;
    sobel[8] = auxiliarMatrix.n;

    vec4 toLum;
    toLum.r = 0.2126;
    toLum.g = 0.7152;
    toLum.b = 0.02722;
    toLum.a = 0.0;

    vec4 sample[9];
    float graySample[9];

    float sobelValue = 0.0;
    for (int i = 0; i < 9; i++) {
        sample[i] = texture2D(textureImage, 
                              gl_TexCoord[0].st + (offset[i]/size));
        graySample[i] = dot(sample[i],toLum);
        sobelValue = sobelValue + graySample[i]*sobel[i];
    }

    gl_FragColor = vec4( 
                    sample[5].r - sobelValue,
                    sample[5].g - sobelValue,
                    sample[5].b - sobelValue,
                    1);

}
